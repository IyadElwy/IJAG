apiVersion: apps/v1
kind: Deployment
metadata:
  name: state-server
  namespace: global
spec:
  selector:
    matchLabels:
      app: state-server
  template:
    metadata:
      labels:
        app: state-server
    spec:
      serviceAccountName: state-changer-service-account
      initContainers:
        - name: initialize-game-state
          image: docker.io/library/state-server:latest
          imagePullPolicy: Never
          resources:
            limits:
              memory: "64Mi"
              cpu: "50m"
          volumeMounts:
            - mountPath: /data
              name: game-state-vol
          command:
            - /bin/bash
            - -c
          args:
            - >
              cp /state-server/data/initialGameState.json /data/gameState.json
      containers:
        - name: state-server
          image: docker.io/library/state-server:latest
          imagePullPolicy: Never
          resources:
            limits:
              memory: "128Mi"
              cpu: "100m"
          ports:
            - containerPort: 5003
          volumeMounts:
            - mountPath: /data
              name: game-state-vol

      volumes:
        - name: game-state-vol
          persistentVolumeClaim:
            claimName: game-state-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: state-server
  namespace: global
spec:
  selector:
    app: state-server
  ports:
    - port: 5003
      targetPort: 5003
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: game-state-pvc
  namespace: global
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Mi
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: state-changer-service-account
  namespace: global
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: state-changer-rolebinding
subjects:
  - kind: ServiceAccount
    name: state-changer-service-account
    namespace: global
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
